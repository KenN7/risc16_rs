# mutiplication test
# fail:{ri1:0=#06x}x{ri2:0=04x} = {risc4:0=#06x}{risc3:0=04x} but should be {ro4:0=#06x}{ro3:0=04x}
# pass:{ri1:0=#06x}x{ri2:0=04x} = {risc4:0=#06x}{risc3:0=04x}
# arg:5
in:r1=0x0000;r2=0x00ff;
out:r4=0x0000;r3=0x0000; #r4 -> poid fort, r3 -> poid faible
in:r1=0x00ff;r2=0x0000;
out:r4=0x0000;r3=0x0000; #
in:r1=0x7fff;r2=0x0007;
out:r4=0x0003;r3=0x7ff9; #
in:r1=0xffff;r2=0x0007;
out:r4=0x0006;r3=0xfff9; #
in:r1=0xa060;r2=0x88dc;
out:r4=0x55bc;r3=0xd280; #
in:r1=0x0001;r2=0x0001;
out:r4=0x0000;r3=0x0001; #
in:r1=0x0003;r2=0x0003;
out:r4=0x0000;r3=0x0009; #
in:r1=0x0007;r2=0x0007;
out:r4=0x0000;r3=0x0031; #
in:r1=0x000f;r2=0x000f;
out:r4=0x0000;r3=0x00e1; #
in:r1=0x001f;r2=0x001f;
out:r4=0x0000;r3=0x03c1; #
in:r1=0x003f;r2=0x003f;
out:r4=0x0000;r3=0x0f81; #
in:r1=0x007f;r2=0x007f;
out:r4=0x0000;r3=0x3f01; #
in:r1=0x00ff;r2=0x00ff;
out:r4=0x0000;r3=0xfe01; #
in:r1=0x01ff;r2=0x01ff;
out:r4=0x0003;r3=0xfc01; #

in:r1=0x03ff;r2=0x03ff;
out:r4=0x000f;r3=0xf801; #
in:r1=0x07ff;r2=0x07ff;
out:r4=0x003f;r3=0xf001; #
in:r1=0x0fff;r2=0x0fff;
out:r4=0x00ff;r3=0xe001; #
in:r1=0x1fff;r2=0x1fff;
out:r4=0x03ff;r3=0xc001; #
in:r1=0x3fff;r2=0x3fff;
out:r4=0x0fff;r3=0x8001; #
in:r1=0x7fff;r2=0x7fff;
out:r4=0x3fff;r3=0x0001; #
in:r1=0xffff;r2=0xffff;
out:r4=0xfffe;r3=0x0001; #

